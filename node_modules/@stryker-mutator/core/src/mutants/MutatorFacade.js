"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const plugin_1 = require("@stryker-mutator/api/plugin");
const di_1 = require("../di");
class MutatorFacade {
    constructor(options, pluginCreator, log) {
        this.options = options;
        this.pluginCreator = pluginCreator;
        this.log = log;
    }
    mutate(inputFiles) {
        const allMutants = this.pluginCreator.create(this.getMutatorName(this.options.mutator))
            .mutate(inputFiles);
        const includedMutants = this.removeExcludedMutants(allMutants);
        this.logMutantCount(includedMutants.length, allMutants.length);
        return includedMutants;
    }
    removeExcludedMutants(mutants) {
        if (typeof this.options.mutator === 'string') {
            return mutants;
        }
        else {
            const mutatorDescriptor = this.options.mutator;
            return mutants.filter(mutant => mutatorDescriptor.excludedMutations.indexOf(mutant.mutatorName) === -1);
        }
    }
    getMutatorName(mutator) {
        if (typeof mutator === 'string') {
            return mutator;
        }
        else {
            return mutator.name;
        }
    }
    logMutantCount(includedMutantCount, totalMutantCount) {
        let mutantCountMessage;
        if (includedMutantCount) {
            mutantCountMessage = `${includedMutantCount} Mutant(s) generated`;
        }
        else {
            mutantCountMessage = `It\'s a mutant-free world, nothing to test.`;
        }
        const numberExcluded = totalMutantCount - includedMutantCount;
        if (numberExcluded) {
            mutantCountMessage += ` (${numberExcluded} Mutant(s) excluded)`;
        }
        this.log.info(mutantCountMessage);
    }
}
MutatorFacade.inject = plugin_1.tokens(plugin_1.commonTokens.options, di_1.coreTokens.pluginCreatorMutator, plugin_1.commonTokens.logger);
exports.MutatorFacade = MutatorFacade;
//# sourceMappingURL=MutatorFacade.js.map