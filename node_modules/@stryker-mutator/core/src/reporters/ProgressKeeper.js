"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const report_1 = require("@stryker-mutator/api/report");
const Timer_1 = require("../utils/Timer");
class ProgressKeeper {
    constructor() {
        this.progress = {
            survived: 0,
            tested: 0,
            total: 0,
        };
    }
    onAllMutantsMatchedWithTests(matchedMutants) {
        this.timer = new Timer_1.default();
        this.mutantIdsWithoutCoverage = matchedMutants.filter(m => m.scopedTestIds.length === 0).map(m => m.id);
        this.progress.total = matchedMutants.length - this.mutantIdsWithoutCoverage.length;
    }
    onMutantTested(result) {
        if (!this.mutantIdsWithoutCoverage.some(id => result.id === id)) {
            this.progress.tested++;
        }
        if (result.status === report_1.MutantStatus.Survived) {
            this.progress.survived++;
        }
    }
    getEtc() {
        const totalSecondsLeft = Math.floor(this.timer.elapsedSeconds() / this.progress.tested * (this.progress.total - this.progress.tested));
        if (isFinite(totalSecondsLeft) && totalSecondsLeft > 0) {
            const hours = Math.floor(totalSecondsLeft / 3600);
            const minutes = Math.floor(totalSecondsLeft / 60 % 60);
            const seconds = Math.floor(totalSecondsLeft % 60);
            return this.formatEtc(hours, minutes, seconds);
        }
        else {
            return 'n/a';
        }
    }
    formatEtc(hours, minutes, seconds) {
        let output;
        if (hours > 0) {
            output = `${hours}h, ${minutes}m, ${seconds}s`;
        }
        else if (minutes > 0) {
            output = `${minutes}m, ${seconds}s`;
        }
        else {
            output = `${seconds}s`;
        }
        return output;
    }
}
exports.default = ProgressKeeper;
//# sourceMappingURL=ProgressKeeper.js.map