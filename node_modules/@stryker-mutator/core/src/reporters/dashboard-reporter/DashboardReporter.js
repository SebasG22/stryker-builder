"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const plugin_1 = require("@stryker-mutator/api/plugin");
const mutation_testing_metrics_1 = require("mutation-testing-metrics");
const objectUtils_1 = require("../../utils/objectUtils");
const Provider_1 = require("../ci/Provider");
const tokens_1 = require("./tokens");
class DashboardReporter {
    constructor(log, dashboardReporterClient) {
        this.log = log;
        this.dashboardReporterClient = dashboardReporterClient;
        this.ciProvider = Provider_1.determineCIProvider();
    }
    readEnvironmentVariable(name) {
        const environmentVariable = objectUtils_1.getEnvironmentVariable(name);
        if (environmentVariable) {
            return environmentVariable;
        }
        else {
            this.log.warn(`Missing environment variable ${name}`);
            return undefined;
        }
    }
    async onMutationTestReportReady(report) {
        const metricsResult = mutation_testing_metrics_1.calculateMetrics(report.files);
        const mutationScore = metricsResult.metrics.mutationScore;
        if (this.ciProvider !== undefined) {
            const isPullRequest = this.ciProvider.isPullRequest();
            if (!isPullRequest) {
                const repository = this.ciProvider.determineRepository();
                const branch = this.ciProvider.determineBranch();
                const apiKey = this.readEnvironmentVariable('STRYKER_DASHBOARD_API_KEY');
                if (repository && branch && apiKey) {
                    await this.dashboardReporterClient.postStrykerDashboardReport({
                        apiKey,
                        branch,
                        mutationScore,
                        repositorySlug: 'github.com/' + repository
                    });
                }
            }
            else {
                this.log.info('Dashboard report is not sent when building a pull request');
            }
        }
        else {
            this.log.info('Dashboard report is not sent when not running on a build server');
        }
    }
}
DashboardReporter.inject = plugin_1.tokens(plugin_1.commonTokens.logger, tokens_1.dashboardReporterTokens.dashboardReporterClient);
exports.default = DashboardReporter;
//# sourceMappingURL=DashboardReporter.js.map