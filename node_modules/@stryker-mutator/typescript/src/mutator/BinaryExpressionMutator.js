"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ts = require("typescript");
const NodeMutator_1 = require("./NodeMutator");
const replaceTokens = {
    [ts.SyntaxKind.PlusToken]: ['-'],
    [ts.SyntaxKind.MinusToken]: ['+'],
    [ts.SyntaxKind.SlashToken]: ['*'],
    [ts.SyntaxKind.AsteriskToken]: ['/'],
    [ts.SyntaxKind.PercentToken]: ['*'],
    [ts.SyntaxKind.LessThanToken]: ['<=', '>='],
    [ts.SyntaxKind.LessThanEqualsToken]: ['<', '>'],
    [ts.SyntaxKind.GreaterThanToken]: ['<=', '>='],
    [ts.SyntaxKind.GreaterThanEqualsToken]: ['<', '>'],
    [ts.SyntaxKind.EqualsEqualsToken]: ['!='],
    [ts.SyntaxKind.ExclamationEqualsToken]: ['=='],
    [ts.SyntaxKind.EqualsEqualsEqualsToken]: ['!=='],
    [ts.SyntaxKind.ExclamationEqualsEqualsToken]: ['==='],
    [ts.SyntaxKind.BarBarToken]: ['&&'],
    [ts.SyntaxKind.AmpersandAmpersandToken]: ['||']
};
class BinaryExpressionMutator extends NodeMutator_1.default {
    constructor() {
        super(...arguments);
        this.name = 'BinaryExpression';
    }
    guard(node) {
        return node.kind === ts.SyntaxKind.BinaryExpression;
    }
    identifyReplacements(node) {
        if (replaceTokens[node.operatorToken.kind]) {
            return replaceTokens[node.operatorToken.kind]
                .map(replacement => ({ node: node.operatorToken, replacement }));
        }
        else {
            return [];
        }
    }
}
exports.default = BinaryExpressionMutator;
//# sourceMappingURL=BinaryExpressionMutator.js.map