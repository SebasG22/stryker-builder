"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ts = require("typescript");
const NodeMutator_1 = require("./NodeMutator");
class ConditionalExpressionMutator extends NodeMutator_1.default {
    constructor() {
        super(...arguments);
        this.name = 'ConditionalExpression';
    }
    guard(node) {
        return node.kind === ts.SyntaxKind.BinaryExpression;
    }
    isInvalidParent(parent) {
        switch (parent.kind) {
            case ts.SyntaxKind.IfStatement:
            case ts.SyntaxKind.ForStatement:
            case ts.SyntaxKind.WhileStatement:
            case ts.SyntaxKind.DoStatement:
            case ts.SyntaxKind.LiteralType:
                return true;
            default:
                return false;
        }
    }
    isInvalidOperator(operatorToken) {
        switch (operatorToken.kind) {
            case ts.SyntaxKind.PlusToken:
            case ts.SyntaxKind.MinusToken:
            case ts.SyntaxKind.SlashToken:
            case ts.SyntaxKind.AsteriskToken:
            case ts.SyntaxKind.PercentToken:
                return true;
            default:
                return false;
        }
    }
    identifyReplacements(node) {
        if ((node.parent && this.isInvalidParent(node.parent)) || this.isInvalidOperator(node.operatorToken)) {
            return [];
        }
        return [
            { node, replacement: 'false' },
            { node, replacement: 'true' }
        ];
    }
}
exports.default = ConditionalExpressionMutator;
//# sourceMappingURL=ConditionalExpressionMutator.js.map