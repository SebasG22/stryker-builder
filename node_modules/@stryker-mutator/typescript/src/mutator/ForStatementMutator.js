"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ts = require("typescript");
const tsHelpers_1 = require("../helpers/tsHelpers");
const NodeMutator_1 = require("./NodeMutator");
class ForStatementMutator extends NodeMutator_1.default {
    constructor() {
        super(...arguments);
        this.name = 'ForStatement';
    }
    guard(node) {
        return node.kind === ts.SyntaxKind.ForStatement;
    }
    identifyReplacements(node, sourceFile) {
        if (node.condition) {
            return [{ node: node.condition, replacement: 'false' }];
        }
        else {
            // No node to replace. Happens when for statement is defined as `for(let i=0;;i++)`
            // Replace the entire node
            const replacement = tsHelpers_1.printNode(ts.createFor(node.initializer, ts.createFalse(), node.incrementor, node.statement), sourceFile);
            return [{ node, replacement }];
        }
    }
}
exports.default = ForStatementMutator;
//# sourceMappingURL=ForStatementMutator.js.map